[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "feather_spotter"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.10"
license = ""
keywords = []
authors = [{ name = "Jason Washburn", email = "jason.washburn@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
  "numpy",
  "ultralytics",
  "torch",
  "torchvision",
  "torchaudio",
  "pillow",
  "fastapi",
  "uvicorn",
  "python-multipart",
  "beanie",
]

[project.optional-dependencies]
dev = [
  "coverage[toml]>=6.5",
  "httpx",
  "pytest",
  "pytest-mock",
  "pytest-asyncio",
  "ruff",
  "black",
  "pre-commit",
  "mypy",
  "ipykernel",
  "pip-tools",
  "bandit",
  "mongomock-motor"
]

[project.urls]
Documentation = "https://github.com/unknown/feather_spotter#readme"
Issues = "https://github.com/unknown/feather_spotter/issues"
Source = "https://github.com/unknown/feather_spotter"

[tool.hatch.version]
path = "src/feather_spotter/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "httpx",
  "pytest",
  "pytest-mock",
  "pytest-asyncio",
  "ruff",
  "black",
  "pre-commit",
  "mypy",
  "ipykernel",
  "pip-tools",
  "bandit",
  "mongomock-motor"
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]
update-deps = [
  "pip-compile -o requirements.txt",
  "pip-compile --extra=dev -o requirements-dev.txt",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = ["black>=23.1.0", "mypy>=1.0.0", "ruff>=0.0.243"]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/feather_spotter tests}"
style = ["ruff {args:.}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.black]
target-version = ["py310"]
skip-string-normalization = true

[tool.ruff]
src = ["src", "tests"]
target-version = "py311"
select = ["ALL"]
ignore = ["ANN101"]
unfixable = [
  # Don't remove `print` statements, just warn.
  "T201",
  "ERA001",
]

[tool.ruff.per-file-ignores]
"./**/__*__.py" = ["D100", "D104"]
"./tests/**/*.py" = ["S101", "PLR2004", "SLF001"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-type-checking]
strict = false


[tool.coverage.run]
source_pkgs = ["feather_spotter", "tests"]
branch = true
parallel = true
omit = ["src/feather_spotter/__about__.py"]

[tool.coverage.paths]
feather_spotter = [
  "src/feather_spotter",
  "*/feather_spotter/src/feather_spotter",
]
tests = ["tests", "*/feather_spotter/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.mypy]
python_version = "3.11"
files = ["src", "tests"]
ignore_missing_imports = true
